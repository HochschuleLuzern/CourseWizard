<?php

class ilCourseWizardPlugin extends ilRepositoryObjectPlugin
{
    public const ID = 'xcwi';

    /** @var string[][] */
    private $role_template_list;

    /** @var \CourseWizard\DB\PluginConfigKeyValueStore  */
    private $plugin_config;

    public function __construct()
    {

        parent::__construct();

        global $DIC;
        require_once $this->getDirectory() . '/vendor/autoload.php';
        if($DIC->isDependencyAvailable('globalScreen'))
        {
            $this->provider_collection->setModificationProvider(new ilCourseWizardGlobalScreenModificationProvider($DIC, $this));
        }

        $this->plugin_config = new \CourseWizard\DB\PluginConfigKeyValueStore($this->db);

        $this->role_template_list = array(
            array('title' => 'xcwi_container_admin',
                  'description' => '',
                  'conf_key' => 'rolt_container_admin'),
            array('title' => 'xcwi_container_content_creator',
                  'description' => '',
                  'conf_key' => 'rolt_content_creator')
        );
    }

    private function removeDefinedRoleTemplates(array $rolt_definition_list)
    {
        global $DIC;

        /** @var \CourseWizard\role\RoleTemplatesDefinition $rolt_definition */
        foreach($rolt_definition_list as $rolt_definition) {

            $obj_id = $this->plugin_config->get($rolt_definition->getConfKey());

            if ($obj_id != null) {
                $rolt = ilObjectFactory::getInstanceByObjId($obj_id, false);

                if($rolt != null) {
                    $rolt->delete();
                }
            }
        }
    }

    public function getPluginName()
    {
        return 'CourseWizard';
    }

    public function activate()
    {
        if($this->plugin_config->get(\CourseWizard\DB\PluginConfigKeyValueStore::KEY_PLUGIN_ARRANGED) != '1') {
            $this->arrangePluginArtifacts();
            $this->plugin_config->set(\CourseWizard\DB\PluginConfigKeyValueStore::KEY_PLUGIN_ARRANGED, '1');

            ilUtil::sendSuccess($this->txt('plugin_db_artifacts_created'), true);
        }

        return parent::activate(); // TODO: Change the autogenerated stub
    }

    protected function uninstallCustom()
    {
        $this->removeDefinedRoleTemplates(\CourseWizard\role\RoleTemplatesDefinition::getRoleTemplateDefinitions());

        $dbs = array(\CourseWizard\DB\CourseTemplateRepository::TABLE_NAME,
                     \CourseWizard\DB\PluginConfigKeyValueStore::TABLE_NAME,
                     \CourseWizard\DB\TemplateContainerConfigurationRepository::TABLE_NAME,
                     \CourseWizard\DB\WizardFlowRepository::TABLE_NAME
            );

        foreach($dbs as $db)
        {
            $this->db->dropTable($db, false);
        }
    }

    private function arrangePluginArtifacts()
    {
        /** @var \CourseWizard\role\RoleTemplatesDefinition $rolt_definition */
        foreach(\CourseWizard\role\RoleTemplatesDefinition::getRoleTemplateDefinitions() as $rolt_definition) {
            $obj_role = $this->createRoleTemplate($rolt_definition);

            $this->plugin_config->set($rolt_definition->getConfKey(), "{$obj_role->getId()}");

            ilUtil::sendSuccess($this->txt('plugin_rolt_created') . ' ' . $rolt_definition->getTitle(), true);
        }
    }

    private function createRoleTemplate(\CourseWizard\role\RoleTemplatesDefinition $rolt_definition) : ilObjRoleTemplate
    {
        global $DIC;
        $role_template = new ilObjRoleTemplate();
        $role_template->setTitle($rolt_definition->getTitle());
        $role_template->setDescription($rolt_definition->getDescription());
        $role_template->create();;
        $rbac_admin = $DIC->rbac()->admin();
        $rbac_admin->assignRoleToFolder($role_template->getId(), ROLE_FOLDER_ID, 'n');
        $rbac_admin->setProtected($role_template->getRefId(), $role_template->getId(), 'y');

        return $role_template;

    }

    /**
     * @return string[]
     */
    public function getParentTypes()
    {
        $par_types = array("cat");
        return $par_types;
    }

    public function allowCopy()
    {
        return false;
    }

}