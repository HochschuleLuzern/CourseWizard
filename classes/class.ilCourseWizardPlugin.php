<?php declare(strict_types = 1);

class ilCourseWizardPlugin extends ilRepositoryObjectPlugin
{
    public const ID = 'xcwi';
    public const LANG_PREFIX = 'rep_robj_xcwi_';

    /** @var \CourseWizard\DB\PluginConfigKeyValueStore  */
    private $plugin_config_repo;
    private $role_folder_id;

    public function __construct()
    {
        global $DIC;
        parent::__construct($DIC->database(), $DIC["component.repository"],self::ID);

        /* hack so that modification provider can be set before ilInitialisation.initGlobalScreen() has been called */
        $doRefineryUnset = false;
        $doGlobalScreenUnset = false;
        if (!($DIC->isDependencyAvailable('globalScreen'))) {
            if (!($DIC->isDependencyAvailable('refinery'))) {
                $doRefineryUnset = true;
                ilCourseWizardPlugin::initRefinery();
            }
            $doGlobalScreenUnset = true;
            ilCourseWizardPlugin::initGlobalScreen();
        }

        if ($DIC->isDependencyAvailable('globalScreen')) {
            $this->provider_collection->setModificationProvider(new ilCourseWizardGlobalScreenModificationProvider($DIC, $this));
        }
        if ($doRefineryUnset){
            $DIC->offsetUnset('refinery');
        }
        if ($doGlobalScreenUnset){
            $DIC->offsetUnset('global_screen');
        }
        $this->plugin_config_repo = new \CourseWizard\DB\PluginConfigKeyValueStore($this->db);
        $this->role_folder_id = ROLE_FOLDER_ID;
    }

    private static function initGlobalScreen(): void
    {
        global $DIC;
        $DIC['global_screen'] = function () use ($DIC) {
            return new \ILIAS\GlobalScreen\Services(
                new ilGSProviderFactory($DIC),
                $DIC->ui(),
                htmlentities(str_replace([" ", ".", "-"], "_", ILIAS_VERSION_NUMERIC))
            );
        };
        /*
        $c->globalScreen()->tool()->context()->stack()->clear();
        $c->globalScreen()->tool()->context()->claim()->main();
        */
    }


    private static function initRefinery(): void
    {
        global $DIC;
        $DIC['refinery'] = function ($container)  {
            $dataFactory = new \ILIAS\Data\Factory();
            $language = $container['lng'];

            return new \ILIAS\Refinery\Factory($dataFactory, $language);
        };
    }

    private function removeDefinedRoleTemplates(array $rolt_definition_list): void
    {
        global $DIC;

        /** @var \CourseWizard\role\RoleTemplatesDefinition $rolt_definition */
        foreach ($rolt_definition_list as $rolt_definition) {
            $obj_id = (int) $this->plugin_config_repo->get($rolt_definition->getConfKey());

            if ($obj_id != null) {
                $rolt = ilObjectFactory::getInstanceByObjId($obj_id, false);

                if ($rolt != null) {
                    $rolt->delete();
                }
            }
        }
    }

    public function getPluginName(): string
    {
        return 'CourseWizard';
    }

    public function activate(): bool
    {
        global $DIC;

        if ($this->plugin_config_repo->get(\CourseWizard\DB\PluginConfigKeyValueStore::KEY_PLUGIN_ARRANGED) != '1') {
            $this->arrangePluginArtifacts();
            $this->plugin_config_repo->set(\CourseWizard\DB\PluginConfigKeyValueStore::KEY_PLUGIN_ARRANGED, '1');

            if(isset($DIC["tpl"])) {
                $DIC["tpl"]->setOnScreenMessage('success',
                    $this->txt('plugin_db_artifacts_created'));
            }
        }

        return parent::activate(); // TODO: Change the autogenerated stub
    }

    protected function uninstallCustom(): void
    {
        $this->removeDefinedRoleTemplates(\CourseWizard\role\RoleTemplatesDefinition::getRoleTemplateDefinitions());

        $dbs = array(\CourseWizard\DB\CourseTemplateRepository::TABLE_NAME,
                     \CourseWizard\DB\PluginConfigKeyValueStore::TABLE_NAME,
                     \CourseWizard\DB\TemplateContainerConfigurationRepository::TABLE_NAME,
                     \CourseWizard\DB\WizardFlowRepository::TABLE_NAME
            );

        foreach ($dbs as $db) {
            $this->db->dropTable($db, false);
        }
    }

    private function arrangePluginArtifacts()
    {
        global $DIC;

        /** @var \CourseWizard\role\RoleTemplatesDefinition $rolt_definition */
        foreach (\CourseWizard\role\RoleTemplatesDefinition::getRoleTemplateDefinitions() as $rolt_definition) {
            $obj_role_template = $this->createRoleTemplate($rolt_definition);

            $this->plugin_config_repo->set($rolt_definition->getConfKey(), "{$obj_role_template->getId()}");
            $this->setRoleTemplatePermissions($obj_role_template, $rolt_definition);

            ilCourseWizardPlugin::sendSuccess($this->txt('plugin_rolt_created') . ' ' . $rolt_definition->getTitle());

        }
    }

    private function setRoleTemplatePermissions(ilObjRoleTemplate $role_template, \CourseWizard\role\RoleTemplatesDefinition $rolt_definition)
    {
        global $DIC;

        $rbac_review = $DIC->rbac()->review();

        // For each subtype ...
        $subs = ilObjRole::getSubObjects('root', false);
        foreach ($subs as $subtype => $def) {
            $operations = $rbac_review->getOperationsByTypeAndClass($subtype, 'object');

            $enabled_operations = array();
            // ... check each possible operation (for this type, e.g. 'blog' -> 'read') ...
            foreach ($operations as $ops_id) {
                $operation = $rbac_review->getOperation($ops_id);

                // ... and check, if the operation should be used for the given role template
                if ($rolt_definition->checkDefaultPermissionByOperationName($subtype, $operation['operation'])) {
                    // Collect operations in an array, since $rbac_admin->setRolePermission() only accepts an operation list
                    $enabled_operations[] = $ops_id;
                }
            }

            // If operations were selected, set those permissions for the given role template
            if (count($enabled_operations) > 0) {
                $DIC->rbac()->admin()->setRolePermission($role_template->getId(), $subtype, $enabled_operations, $this->role_folder_id);
            }
        }
    }

    private function createRoleTemplate(\CourseWizard\role\RoleTemplatesDefinition $rolt_definition) : ilObjRoleTemplate
    {
        global $DIC;
        $role_template = new ilObjRoleTemplate();
        $role_template->setTitle($rolt_definition->getTitle());
        $role_template->setDescription($rolt_definition->getDescription());
        $role_template->create();

        $rbac_admin = $DIC->rbac()->admin();
        $rbac_admin->assignRoleToFolder($role_template->getId(), $this->role_folder_id, 'n');
        $is_protected = $rolt_definition->isProtected() ? 'y' : 'n';
        $rbac_admin->setProtected($role_template->getRefId(), $role_template->getId(), $is_protected);

        return $role_template;
    }

    /**
     * @return string[]
     */
    public function getParentTypes(): array
    {
        $par_types = array("cat");
        return $par_types;
    }

    public function allowCopy(): bool
    {
        return false;
    }

    public function getGlobalCrsImporterRole() : int
    {
        return (int) $this->plugin_config_repo->get(\CourseWizard\DB\PluginConfigKeyValueStore::KEY_CRS_IMPORTER_ROLE_ID);
    }

    public function langVarAsPluginLangVar(string $lang_var) : string
    {
        return self::LANG_PREFIX . $lang_var;
    }

    /**
     * Send Info Message to Screen.
     *
     * @param	string	message
     * @param	boolean	if true message is kept in session
     * @static
     *
     */
    public static function sendInfo($a_info = "", $a_keep = false)
    {
        global $DIC;

        if(isset($DIC["tpl"])) {
            $tpl = $DIC["tpl"];
            $tpl->setOnScreenMessage("info", $a_info, $a_keep);
        }
    }

    /**
     * Send Failure Message to Screen.
     *
     * @param	string	message
     * @param	boolean	if true message is kept in session
     * @static
     *
     */
    public static function sendFailure($a_info = "", $a_keep = false)
    {
        global $DIC;

        if (isset($DIC["tpl"])) {
            $tpl = $DIC["tpl"];
            $tpl->setOnScreenMessage("failure", $a_info, $a_keep);
        }
    }

    /**
     * Send Question to Screen.
     *
     * @param	string	message
     * @param	boolean	if true message is kept in session
     * @static	*/
    public static function sendQuestion($a_info = "", $a_keep = false)
    {
        global $DIC;

        if(isset($DIC["tpl"])) {
            $tpl = $DIC["tpl"];
            $tpl->setOnScreenMessage("question", $a_info, $a_keep);
        }
    }

    /**
     * Send Success Message to Screen.
     *
     * @param	string	message
     * @param	boolean	if true message is kept in session
     * @static
     *
     */
    public static function sendSuccess($a_info = "", $a_keep = false)
    {
        global $DIC;

        /** @var ilTemplate $tpl */
        if(isset($DIC["tpl"])) {
            $tpl = $DIC["tpl"];
            $tpl->setOnScreenMessage("success", $a_info, $a_keep);
        }
    }
}
