<?php

class ilObjCourseWizard extends ilObjectPlugin
{

    protected function initType()
    {
        $this->setType(ilCourseWizardPlugin::ID);
    }

    protected function doCreate()
    {
        parent::doCreate(); // TODO: Change the autogenerated stub
    }

    protected function doRead()
    {
        parent::doRead(); // TODO: Change the autogenerated stub
    }

    protected function doUpdate()
    {
        parent::doUpdate(); // TODO: Change the autogenerated stub
    }

    protected function doDelete()
    {
        parent::doDelete(); // TODO: Change the autogenerated stub
    }

    /**
     * Get subitems of container
     *
     * @param bool administration panel enabled
     * @param bool side blocks enabled
     *
     * @return	array
     */
    public function getSubItems(
        $a_admin_panel_enabled = false,
        $a_include_side_block = false,
        $a_get_single = 0,
        \ilContainerUserFilter $container_user_filter = null
    ) {
        $objDefinition = $this->obj_definition;

        // Caching
        if (is_array($this->items[(int) $a_admin_panel_enabled][(int) $a_include_side_block]) &&
            !$a_get_single) {
            return $this->items[(int) $a_admin_panel_enabled][(int) $a_include_side_block];
        }

        $objects = $this->getInitialSubitems();
        $objects = $this->applyContainerUserFilter($objects, $container_user_filter);
        $objects = self::getCompleteDescriptions($objects);

        // apply container classification filters
        $repo = new ilClassificationSessionRepository($this->getRefId());
        foreach (ilClassificationProvider::getValidProviders($this->getRefId(), $this->getId(), $this->getType()) as $class_provider) {
            $id = get_class($class_provider);
            $current = $repo->getValueForProvider($id);
            if ($current) {
                $class_provider->setSelection($current);
                $filtered = $class_provider->getFilteredObjects();
                $objects = array_filter($objects, function ($i) use ($filtered) {
                    return (is_array($filtered) && in_array($i["obj_id"], $filtered));
                });
                //if (count($filtered) > 0) {
                //    var_dump($filtered);
                //    echo "<br><br>";
                //    var_dump($objects);
                //    exit;
                //}
            }
        }

        $found = false;
        $all_ref_ids = array();

        if (!self::$data_preloaded) {
            include_once("./Services/Object/classes/class.ilObjectListGUIPreloader.php");
            $preloader = new ilObjectListGUIPreloader(ilObjectListGUI::CONTEXT_REPOSITORY);
        }

        include_once('Services/Container/classes/class.ilContainerSorting.php');
        $sort = ilContainerSorting::_getInstance($this->getId());

        // TODO: check this
        // get items attached to a session
        include_once './Modules/Session/classes/class.ilEventItems.php';
        $event_items = ilEventItems::_getItemsOfContainer($this->getRefId());

        $classification_filter_active = $this->isClassificationFilterActive();
        foreach ($objects as $key => $object) {
            if ($a_get_single > 0 && $object["child"] != $a_get_single) {
                continue;
            }

            // hide object types in devmode
            if ($objDefinition->getDevMode($object["type"]) || $object["type"] == "adm"
                || $object["type"] == "rolf") {
                continue;
            }

            // remove inactive plugins
            if ($objDefinition->isInactivePlugin($object["type"])) {
                continue;
            }

            // BEGIN WebDAV: Don't display hidden Files, Folders and Categories
            if (in_array($object['type'], array('file','fold','cat'))) {
                include_once 'Modules/File/classes/class.ilObjFileAccess.php';
                if (ilObjFileAccess::_isFileHidden($object['title'])) {
                    $this->setHiddenFilesFound(true);
                    if (!$a_admin_panel_enabled) {
                        continue;
                    }
                }
            }
            // END WebDAV: Don't display hidden Files, Folders and Categories

            // including event items!
            if (!self::$data_preloaded) {
                $preloader->addItem($object["obj_id"], $object["type"], $object["child"]);
            }

            // filter out items that are attached to an event
            if (in_array($object['ref_id'], $event_items) && !$classification_filter_active) {
                continue;
            }

            // filter side block items
            if (!$a_include_side_block && $objDefinition->isSideBlock($object['type'])) {
                continue;
            }

            $all_ref_ids[] = $object["child"];
        }

        // data preloader
        if (!self::$data_preloaded) {
            $preloader->preload();
            unset($preloader);

            self::$data_preloaded = true;
        }

        foreach ($objects as $key => $object) {
            // see above, objects were filtered
            if (!in_array($object["child"], $all_ref_ids)) {
                continue;
            }

            // group object type groups together (e.g. learning resources)
            $type = $objDefinition->getGroupOfObj($object["type"]);
            if ($type == "") {
                $type = $object["type"];
            }

            // this will add activation properties
            $this->addAdditionalSubItemInformation($object);

            $this->items[$type][$key] = $object;

            $this->items["_all"][$key] = $object;
            if ($object["type"] != "sess") {
                $this->items["_non_sess"][$key] = $object;
            }
        }
        $this->items[(int) $a_admin_panel_enabled][(int) $a_include_side_block]
            = $sort->sortItems($this->items);

        return $this->items[(int) $a_admin_panel_enabled][(int) $a_include_side_block];
    }
}